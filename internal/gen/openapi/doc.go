// Package openapicompass provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapicompass

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Defines values for GetStudentsParamsSort.
const (
	Id      GetStudentsParamsSort = "id"
	LoginId GetStudentsParamsSort = "loginId"
	Name    GetStudentsParamsSort = "name"
)

// Defines values for GetStudentsParamsOrder.
const (
	Asc  GetStudentsParamsOrder = "asc"
	Desc GetStudentsParamsOrder = "desc"
)

// GetStudentsParams defines parameters for GetStudents.
type GetStudentsParams struct {
	// FacilitatorId 担当教師のID
	FacilitatorId int `form:"facilitator_id" json:"facilitator_id"`

	// Page ページ番号（ページネーション用）
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit 1ページあたりの取得件数
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Sort ソートするフィールド
	Sort *GetStudentsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Order 並び順（昇順または降順）
	Order *GetStudentsParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// NameLike 学生名の部分一致検索
	NameLike *string `form:"name_like,omitempty" json:"name_like,omitempty"`

	// LoginIdLike ログインIDの部分一致検索
	LoginIdLike *string `form:"loginId_like,omitempty" json:"loginId_like,omitempty"`
}

// GetStudentsParamsSort defines parameters for GetStudents.
type GetStudentsParamsSort string

// GetStudentsParamsOrder defines parameters for GetStudents.
type GetStudentsParamsOrder string

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetStudents request
	GetStudents(ctx context.Context, params *GetStudentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetStudents(ctx context.Context, params *GetStudentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStudentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetStudentsRequest generates requests for GetStudents
func NewGetStudentsRequest(server string, params *GetStudentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/students")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "facilitator_id", runtime.ParamLocationQuery, params.FacilitatorId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name_like", runtime.ParamLocationQuery, *params.NameLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LoginIdLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "loginId_like", runtime.ParamLocationQuery, *params.LoginIdLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetStudentsWithResponse request
	GetStudentsWithResponse(ctx context.Context, params *GetStudentsParams, reqEditors ...RequestEditorFn) (*GetStudentsResponse, error)
}

type GetStudentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Students *[]struct {
			Classroom *struct {
				// Id 教室ID
				Id *int `json:"id,omitempty"`

				// Name 教室名
				Name *string `json:"name,omitempty"`
			} `json:"classroom,omitempty"`

			// Id 学生ID
			Id *int `json:"id,omitempty"`

			// LoginId 学生のログインID
			LoginId *string `json:"loginId,omitempty"`

			// Name 学生名
			Name *string `json:"name,omitempty"`
		} `json:"students,omitempty"`

		// TotalCount クエリに一致する学生の合計件数
		TotalCount *int `json:"totalCount,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetStudentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStudentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetStudentsWithResponse request returning *GetStudentsResponse
func (c *ClientWithResponses) GetStudentsWithResponse(ctx context.Context, params *GetStudentsParams, reqEditors ...RequestEditorFn) (*GetStudentsResponse, error) {
	rsp, err := c.GetStudents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStudentsResponse(rsp)
}

// ParseGetStudentsResponse parses an HTTP response from a GetStudentsWithResponse call
func ParseGetStudentsResponse(rsp *http.Response) (*GetStudentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStudentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Students *[]struct {
				Classroom *struct {
					// Id 教室ID
					Id *int `json:"id,omitempty"`

					// Name 教室名
					Name *string `json:"name,omitempty"`
				} `json:"classroom,omitempty"`

				// Id 学生ID
				Id *int `json:"id,omitempty"`

				// LoginId 学生のログインID
				LoginId *string `json:"loginId,omitempty"`

				// Name 学生名
				Name *string `json:"name,omitempty"`
			} `json:"students,omitempty"`

			// TotalCount クエリに一致する学生の合計件数
			TotalCount *int `json:"totalCount,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 学生情報を取得
	// (GET /students)
	GetStudents(ctx echo.Context, params GetStudentsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetStudents converts echo context to params.
func (w *ServerInterfaceWrapper) GetStudents(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetStudentsParams
	// ------------- Required query parameter "facilitator_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "facilitator_id", ctx.QueryParams(), &params.FacilitatorId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter facilitator_id: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", ctx.QueryParams(), &params.Order)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order: %s", err))
	}

	// ------------- Optional query parameter "name_like" -------------

	err = runtime.BindQueryParameter("form", true, false, "name_like", ctx.QueryParams(), &params.NameLike)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name_like: %s", err))
	}

	// ------------- Optional query parameter "loginId_like" -------------

	err = runtime.BindQueryParameter("form", true, false, "loginId_like", ctx.QueryParams(), &params.LoginIdLike)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter loginId_like: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStudents(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/students", wrapper.GetStudents)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/5RVXU8bRxT9L/d5RUyTvvgtaqTKb5H6GEXR1B6cSfcrs+NKCCExMwlsAStuCKW0lQwN",
	"JQQLJy1R47RAf8xlbXjiL1Qza28d1tvA0+7c3bnn3Dtnzp0D5s8EUJ6DGo2qnIWCBT6UITnYHbxo44Ls",
	"r28m3R1ckCiXUcUoD02k10H1fNDdHrQWUW6iWkHZRiVRdm/fraB8ZYILChwQTLg0y5fuuH23Ag58S3mU",
	"Yk1PlaZKMO9AEFKfhAzKcHOqNHUTHAiJeBgZdjci0ahRX9hFnYo8Y1RvUO2h3kf9PerXqLdRH6H6B2Un",
	"af+F8jeUT1DuDguTXfOn+oA6RvU8efZDcrKBcgPlSUY9CCknJnmlBmX4koqvRhQML048KiiPoHzvMpP+",
	"ytPkeG3YJtmt3AEHmPnwuEH5LDjgE8/0ZIZUmcsEEQF/wGrgAKePG4zTGpQFb1AHoupD6hFTqpgNzQ7m",
	"C1qnHObnnVz5+idbb2+wvp88e39xFGcR1E378h71K9SHgxd7F0ffFXAKSZ3COHKNzpCGK6A87VyBxfR/",
	"oFJZTSyj7KbtPf37z/762wJcl3lMTAb+/CrAqI4Nro6HctTrqF7aSAd1UbFRwAswwZ4H9RselO+lC7vH",
	"ATeoM6OI+xmrSHDm1yeROu3tojw831q8OIr7Py6dby1afbVRvjnfbNp4EbWA1ygv4Eai6hi5dGWAr8Qp",
	"1X/SaqLsnuu9JF487S2cLb3r7/wyePdrARvzeOCybz6WxiexUB+geotqB/Vh5c51AIdd/jTmfXNrojDw",
	"I2qt4bNSyTyqgS+ob12ChKHLqvYi33gUGV5zY/lCbq65YOnucZNhgnpR/peqS6KIB4GX/8RqeVdK7dNa",
	"wGURj4qdvCVpNWHCcY4iwdePaFWYJJNQ00MuQB0puMjzjTWOn1ueRhHzTFtXYz4MEM7JrF0HgrhfBA3/",
	"f91ddlL9pBc945y04rO9OPOYvGNcxjeha2HopdFA6Y7mRacft5LltiF/KxXe5QuwP0yaThq5OniynSx/",
	"SCek8ejCobV62mv2D14ah7DZb+Wzn73+Izle+7gPq2e7Kyh3UK5Y6z1B+TOqNYu3gbJtGxE1PI/w2ezA",
	"+vppsvV7NgZNa+b/DQAA//9joKYWGAgAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
